from .utils import Comparable
from typing import Any

class TqdmTypeError(TypeError): ...
class TqdmKeyError(KeyError): ...

class TqdmWarning(Warning):
    def __init__(self, msg, fp_write: Any | None = ..., *a, **k) -> None: ...

class TqdmExperimentalWarning(TqdmWarning, FutureWarning): ...
class TqdmDeprecationWarning(TqdmWarning, DeprecationWarning): ...
class TqdmMonitorWarning(TqdmWarning, RuntimeWarning): ...

class TqdmDefaultWriteLock:
    th_lock: Any
    locks: Any
    def __init__(self) -> None: ...
    def acquire(self, *a, **k) -> None: ...
    def release(self) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, *exc) -> None: ...
    @classmethod
    def create_mp_lock(cls) -> None: ...
    @classmethod
    def create_th_lock(cls) -> None: ...

class Bar:
    ASCII: str
    UTF: Any
    BLANK: str
    COLOUR_RESET: str
    COLOUR_RGB: str
    COLOURS: Any
    frac: Any
    default_len: Any
    charset: Any
    def __init__(self, frac, default_len: int = ..., charset=..., colour: Any | None = ...) -> None: ...
    @property
    def colour(self): ...
    @colour.setter
    def colour(self, value) -> None: ...
    def __format__(self, format_spec): ...

class EMA:
    alpha: Any
    last: int
    calls: int
    def __init__(self, smoothing: float = ...) -> None: ...
    def __call__(self, x: Any | None = ...): ...

class tqdm(Comparable):
    monitor_interval: int
    monitor: Any
    @staticmethod
    def format_sizeof(num, suffix: str = ..., divisor: int = ...): ...
    @staticmethod
    def format_interval(t): ...
    @staticmethod
    def format_num(n): ...
    @staticmethod
    def status_printer(file): ...
    @staticmethod
    def format_meter(n, total, elapsed, ncols: Any | None = ..., prefix: str = ..., ascii: bool = ..., unit: str = ..., unit_scale: bool = ..., rate: Any | None = ..., bar_format: Any | None = ..., postfix: Any | None = ..., unit_divisor: int = ..., initial: int = ..., colour: Any | None = ..., **extra_kwargs): ...
    def __new__(cls, *_, **__): ...
    @classmethod
    def write(cls, s, file: Any | None = ..., end: str = ..., nolock: bool = ...) -> None: ...
    @classmethod
    def external_write_mode(cls, file: Any | None = ..., nolock: bool = ...) -> None: ...
    @classmethod
    def set_lock(cls, lock) -> None: ...
    @classmethod
    def get_lock(cls): ...
    @classmethod
    def pandas(cls, **tqdm_kwargs): ...
    iterable: Any
    disable: Any
    pos: Any
    n: Any
    total: Any
    leave: Any
    desc: Any
    fp: Any
    ncols: Any
    nrows: Any
    mininterval: Any
    maxinterval: Any
    miniters: Any
    dynamic_miniters: Any
    ascii: Any
    unit: Any
    unit_scale: Any
    unit_divisor: Any
    initial: Any
    lock_args: Any
    delay: Any
    gui: Any
    dynamic_ncols: Any
    smoothing: Any
    bar_format: Any
    postfix: Any
    colour: Any
    last_print_n: Any
    sp: Any
    last_print_t: Any
    start_t: Any
    def __init__(self, iterable: Any | None = ..., desc: Any | None = ..., total: Any | None = ..., leave: bool = ..., file: Any | None = ..., ncols: Any | None = ..., mininterval: float = ..., maxinterval: float = ..., miniters: Any | None = ..., ascii: Any | None = ..., disable: bool = ..., unit: str = ..., unit_scale: bool = ..., dynamic_ncols: bool = ..., smoothing: float = ..., bar_format: Any | None = ..., initial: int = ..., position: Any | None = ..., postfix: Any | None = ..., unit_divisor: int = ..., write_bytes: Any | None = ..., lock_args: Any | None = ..., nrows: Any | None = ..., colour: Any | None = ..., delay: int = ..., gui: bool = ..., **kwargs) -> None: ...
    def __bool__(self): ...
    def __nonzero__(self): ...
    def __len__(self): ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_value, traceback) -> None: ...
    def __del__(self) -> None: ...
    def __hash__(self): ...
    def __iter__(self): ...
    def update(self, n: int = ...): ...
    def close(self) -> None: ...
    def clear(self, nolock: bool = ...) -> None: ...
    def refresh(self, nolock: bool = ..., lock_args: Any | None = ...): ...
    def unpause(self) -> None: ...
    def reset(self, total: Any | None = ...) -> None: ...
    def set_description(self, desc: Any | None = ..., refresh: bool = ...) -> None: ...
    def set_description_str(self, desc: Any | None = ..., refresh: bool = ...) -> None: ...
    def set_postfix(self, ordered_dict: Any | None = ..., refresh: bool = ..., **kwargs) -> None: ...
    def set_postfix_str(self, s: str = ..., refresh: bool = ...) -> None: ...
    def moveto(self, n) -> None: ...
    @property
    def format_dict(self): ...
    def display(self, msg: Any | None = ..., pos: Any | None = ...): ...
    @classmethod
    def wrapattr(cls, stream, method, total: Any | None = ..., bytes: bool = ..., **tqdm_kwargs) -> None: ...

def trange(*args, **kwargs): ...
